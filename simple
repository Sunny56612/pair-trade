# coding=utf-8
from __future__ import print_function, absolute_import, unicode_literals
from gm.api import *
import  numpy as np



def init(context):
    #获得N日股票交易数据
    context.N=5
    #选择一对股票
    context.stock=['SZSE.000651','SZSE.000333']
    # 每个交易日的09:40 定时执行algo任务
    schedule(schedule_func=algo, date_rule='1d', time_rule='09:40:00')



def algo(context):
    # 获取上一个交易日的日期
    last_day = get_previous_trading_date(exchange='SHSE', date=context.now)
    # 获取当天有交易的股票，似乎无法同时获得两只股票的数据，所以只能麻烦一点
    not_suspended = get_history_instruments(symbols=context.stock[0], start_date=last_day, end_date=last_day)
    a = len([item['symbol'] for item in not_suspended if not item['is_suspended']])
    not_suspended = get_history_instruments(symbols=context.stock[1], start_date=last_day,end_date=last_day)
    b = len([item['symbol'] for item in not_suspended if not item['is_suspended']])
    #如果有一支停牌，就跳过
    if a+b<2:
        return
    #获得交易数据
    prices1 = history_n(symbol=context.stock[0], frequency='1d', count=context.N, end_time=last_day, fields='close',
                       skip_suspended=True,
                       fill_missing=None, adjust=ADJUST_PREV, adjust_end_time='', df=True)
    prices2=history_n(symbol=context.stock[1], frequency='1d', count=context.N, end_time=last_day, fields='close',
                       skip_suspended=True,
                       fill_missing=None, adjust=ADJUST_PREV, adjust_end_time='', df=True)
    p1=list(prices1['close'])
    p2=list(prices2['close'])
    spread = np.array(p1[:-1]) - np.array(p2[:-1])
    # 计算布林带的上下轨
    up = np.mean(spread) + 2 * np.std(spread)
    down = np.mean(spread) - 2 * np.std(spread)
    # 计算最新价差
    spread_now = p1[-1] - p2[-1]
    # 无交易时若价差上(下)穿布林带上(下)轨则做空(多)价差
    position_s1_long = context.account().position(symbol=context.stock[0], side=PositionSide_Long)
    position_s2_long = context.account().position(symbol=context.stock[1], side=PositionSide_Long)
    if not position_s1_long and not position_s2_long:
        if spread_now > up:
            order_target_percent(symbol=context.stock[1], percent=0.5, order_type=OrderType_Market,
                                 position_side=PositionSide_Long)
        if spread_now < down:
            order_target_percent(symbol=context.stock[0], percent=0.5, order_type=OrderType_Market,
                                 position_side=PositionSide_Long)
            # 价差回归时平仓
    elif position_s2_long:
        if spread_now <= up:
            order_close_all()
    elif position_s1_long:
        if spread_now >= down:
            order_close_all()


if __name__ == '__main__':
    '''
    strategy_id策略ID,由系统生成
    filename文件名,请与本文件名保持一致
    mode实时模式:MODE_LIVE回测模式:MODE_BACKTEST
    token绑定计算机的ID,可在系统设置-密钥管理中生成
    backtest_start_time回测开始时间
    backtest_end_time回测结束时间
    backtest_adjust股票复权方式不复权:ADJUST_NONE前复权:ADJUST_PREV后复权:ADJUST_POST
    backtest_initial_cash回测初始资金
    backtest_commission_ratio回测佣金比例
    backtest_slippage_ratio回测滑点比例
    '''
    run(strategy_id='73bb5bf2-a536-11e8-bd52-9cd21ef04ea9',
        filename='配对交易.py',
        mode=MODE_BACKTEST,
        token='c395247a76e8a5caeee699d668d6f550213bc418',
        backtest_start_time='2014-01-01 08:00:00',
        backtest_end_time='2018-08-01 16:00:00',
        backtest_adjust=ADJUST_PREV,
        backtest_initial_cash=10000000,
        backtest_commission_ratio=0.0001,
        backtest_slippage_ratio=0.0001)
